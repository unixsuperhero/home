#!/usr/bin/env ruby
require '/Users/unixsuperhero/bin/h-base.rb'
require 'net/http'
require 'uri'
require 'nokogiri'
require 'bencode_ext'
require 'pry'

xdg_config = File.join(Dir.home, '.config', 'h-torrent')
xdg_data = File.join(Dir.home, '.local', 'share', 'h-torrent').tap do |dir|
  Dir.mkdir(dir) unless Dir.exist?(dir)
end

class Feed
  attr_reader :url

  def initialize(url)
    @url = url
  end

  def uri = @uri ||= URI(url)
  def xml = @xml ||= Nokogiri::XML(rss)
  def items = @items ||= xml.css('item').map(&Item.method(:new))

  def rss
    @rss ||= proc {
      puts format('Fetching feed: %s', uri)
      Net::HTTP.get(uri)
    }.call
  end

  class Item
    attr_reader :root

    def initialize(root)
      @root = root
    end

    def title = root.css('title')&.text
    def link = root.css('link')&.text
  end
end

class Torrent
  def self.fetch(url)
    uri = URI(url)
    data = Net::HTTP.get(uri)

    new(data)
  end

  attr_reader :encoded_data

  def initialize(encoded_data)
    @encoded_data = encoded_data
  end

  def data = @data ||= encoded_data.bdecode
  def info = @info ||= data['info']
  def files = @files ||= info['files']
  def file_count = @file_count ||= files.count || 1
  def file_names = @file_names ||= files&.map{|f| f['path'] } || [info['name']]
end

o = Hiiro.init(*ARGV)
o.add_subcmd(:fetch) { |*args|
  feed_config_path = File.join(xdg_config, 'feeds')

  feeds = args
  if feeds.none? && File.exist?(feed_config_path)
    feeds = File.readlines(feed_config_path, chomp: true)
  end

  history = File.readlines(File.join(xdg_data, 'history'), chomp: true) rescue []

  feeds.each do |feed_url|
    feed = Feed.new(feed_url)

    torrents = feed.items.inject([]) do |list, item|
      if history.include?(item.title)
        puts format('Skip: "%s"', item.title)
        next
      end

      puts format('Fetching torrent: "%s" => "%s"', item.title, item.link)

      list << Torrent.fetch(item.link)

      break list if list.count >= 10

      list
    end

    binding.pry
  end
}

o.run
