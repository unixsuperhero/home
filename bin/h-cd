#!/usr/bin/env ruby

require 'pry'
require File.join(Dir.home, 'bin', 'h-base.rb')

PROJECT_DIRS = Dir.glob(File.join(Dir.home, 'proj', '*/')).map { |path|
  [File.basename(path), path]
}.to_h

def print_project(name, path=nil)
  fmt = '  %-24s %s'

  path ||= PROJECT_DIRS[name]

  if path.nil?
    puts "no project found"
    return
  end

  puts format(fmt, name, path)
end

def make_session(name, path)
  system("tmux", "new", "-d", "-s", name, "-c", path)
end

def attach_session(name)
  exec('tmux', 'attach', '-t', name)
end

def switch_client(name)
  exec('tmux', 'switch', '-t', name)
end

o = Hiiro.init(*ARGV)

puts ARGV:, args: o.args

o.add_default { |*args|
  project_name, *others = args
  re = /#{project_name}/i

  matches = PROJECT_DIRS.select{|proj, path| proj.match?(re) }

  if matches.count > 1
    matches = matches.select{|name, path| name == project_name }
  end

  case matches.count
  when 0
    puts "ERROR: No matches found"
    puts
    puts "Projects:"
    PROJECT_DIRS.each { |name, path|
      print_project(name, path)
    }
  when 1
    name, path = matches.first

    puts "changing dir: #{path}"
    Dir.chdir(path)

    make_session(name, path)
    ENV['TMUX'] ?
      switch_client(name) :
      attach_session(name)
  else
    puts "ERROR: Multiple matches found"
    puts
    puts "Matches:"
    matches.each { |name, path|
      print_project(name, path)
    }
  end
}

o.run

