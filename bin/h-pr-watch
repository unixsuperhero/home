#!/usr/bin/env ruby

require 'pry'
require 'json'
require 'digest'

prs = { '572233' => 'pending' }
approvals = {}
first_run = true

last_prs = {}
last_json_md5 = nil

class Pr
  attr_reader :data

  def self.prs_from_json(json)
    JSON.parse(json).each_with_object({}) do |pr, h|
      o = new(pr)

      h[o.number] = o
    end
  rescue => e
    puts "ERROR: #{e.message}; json: #{json}"
    :failed
  end

  def initialize(data)
    @data = data
  end

  def author = data.dig(*%w[author login])
  def branch = data["headRefName"]
  def number = data["number"]

  def is_draft = data["isDraft"]
  def merge_state_status = data["mergeStateStatus"]
  def mergeable = data["mergeable"]
  def review_decision = data["reviewDecision"]
  def state = data["state"]
  def title = data["title"]
  def url = data["url"]
  def comments = data["comments"]
  def comment_count = comments.count

  def to_h
    {
      number:,
      branch:,
      author:,
      is_draft:,
      merge_state_status:,
      mergeable:,
      review_decision:,
      state:,
      title:,
      url:,
      comment_count:,
    }
  end

  def diff(old_pr)
    new_values = to_h
    old_values = old_pr.to_h

    return {} if old_values.empty?

    diff = new_values.each_with_object({}) do |(k, v), h|
      next if old_values[k] == v

      h[k] = [old_values[k], v]
    end
  end
end

loop do
  json = `gh pr status --json number,author,headRefName,isDraft,mergeStateStatus,mergeable,reviewDecision,state,title,url,comments --jq '.createdBy'`

  json_md5 = Digest::MD5.hexdigest(json)

  if last_json_md5 && last_json_md5 == json_md5
    puts "skipping...api result is the same"
    sleep(30)
    next
  end

  outfile = "tmp/prs.#{Time.now.strftime('%Y%m%d%H%M%S')}.json"
  File.write(outfile, json)

  readable_json = `cat #{outfile} | jq`
  File.write(outfile, readable_json)

  prs = Pr.prs_from_json(json)

  if prs == :failed
    sleep 20
    next
  end

  last_json_md5 = json_md5

  prs.each.with_index do |(number, pr), i|
    puts
    puts "# ---- PR ##{i} ----"
    puts "number: #{pr.number}"
    puts "author: #{pr.author}"
    puts "branch: #{pr.branch}"
    puts "draft: #{pr.is_draft}"
    puts "merge_state_status: #{pr.merge_state_status}"
    puts "mergeable: #{pr.mergeable}"
    puts "state: #{pr.state}"
    puts "review_decision: #{pr.review_decision}"
    puts "url: #{pr.url}"
    puts "title: #{pr.title}"
    puts "comment_count: #{pr.comment_count}"
    puts "# ---- END PR ##{i} ----"
    puts

    last_pr = last_prs[number]
    diff = pr.diff(last_pr)

    unless diff.empty?
      puts "# DIFF => #{pr.number}"
      puts "number: #{pr.number}"

      words = "pr ##{pr.number} changed.  "
      diff.each do |k, (old_v, new_v)|
        puts "#{k} CHANGED FROM #{old_v.inspect} TO #{new_v.inspect}"
        words += "#{k} is now #{new_v}.  "
      end

      system('say', words)
    end
  end

  last_prs = prs
end
